;; NOTE: 'site-start.el' is always loaded before '.emacs'.  'default.el' always
;; loads after '.emacs'.

(require 'cl)

;; Use a separate file for customizations made through Customize
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)

;; Turn off mouse interface early in startup to avoid momentary display
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(defalias 'yes-or-no-p 'y-or-n-p)

;; Set repos for package manager
(load "package")
(package-initialize)
(setq package-archives '(
                         ("gnu" . "http://elpa.gnu.org/packages/")
;			 ("marmalade" . "http://marmalade-repo.org/packages/")
;			 ("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")))

(defvar cp/packages '(clues-theme
                      color-theme-sanityinc-solarized
                      color-theme-sanityinc-tomorrow
                      distinguished-theme gruvbox-theme
                      use-package)
  "Default packages")

(defun cp/packages-installed-p ()
  (loop for pkg in cp/packages
        when (not (package-installed-p pkg)) do (return nil)
        finally (return t)))

(unless (cp/packages-installed-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (pkg cp/packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))

(require 'use-package)

(defun depends--helper (deps body)
  (let ((dep (if (stringp (car deps)) (pop deps) (cons 'quote (list (pop deps))))))
    (list 'eval-after-load dep
          (cons 'lambda (cons nil (if (not deps)
                                      body
                                    (list (depends--helper deps body))))))))

(defmacro depends (&rest args)
  (declare (indent defun))
  (let ((dependencies nil))
    (while (or (stringp (car args))
               (symbolp (car args)))
      (push (pop args) dependencies))
    (depends--helper dependencies args)))

(add-to-list 'load-path "~/.emacs.d/elisp/")

;;;; common-lisp
(use-package cl-lib :ensure t)


;;;; auto-complete
(use-package auto-complete :ensure t
  :init (global-auto-complete-mode t))


;;;; flycheck
(use-package flycheck
  :init (depends "cc-mode"
          (add-hook 'c-mode-hook 'flycheck-mode)
          (add-hook 'c++-mode-hook 'flycheck-mode))

  :config (progn )
  :defer t
  :ensure t)

(use-package flycheck-pos-tip :ensure t
  :init (custom-set-variables
         '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))


;;;; company
(use-package company :defer t :ensure t)

;;;; confluence
(use-package confluence :ensure t
  :init (setq confluence-url "http://confluence.atdesk.com/confluence/rpc/xmlrpc")

  :config (add-hook 'confluence-edit-mode-hook
                    (local-set-key "\C-xw" confluence-prefix-map)
                    (local-set-key "\M-j" 'confluence-newline-and-indent)
                    (local-set-key "\M-;" 'confluence-list-indent-dwim))

  :bind ("C-x w f" . confluence-get-page))


(use-package org-jira :ensure t
  :init (setq jiralib-url "http://jira.atdesk.com/jira")
  :bind (("s-j g i" . org-jira-get-issues)
         ("s-j g s" . org-jira-get-subtasks)))

(defun open-jira-ticket-at-point ()
  "Open browser with Jira ticket at point."
  (interactive)
  (let ((ticket (thing-at-point 'sexp)))
    (if (eq nil (string-match-p "^[A-z]+-[0-9]+$" ticket))
        (setq ticket (read-from-minibuffer
                      "Not sure if this is a ticket: "
                      ticket)))
    (browse-url
     (concat jiralib-url "/browse/" ticket))))


;;;; eldoc
(use-package eldoc :ensure t
  :init (add-hook 'prog-mode-hook 'turn-on-eldoc-mode))

(use-package eldoc-extension :ensure t)
;(use-package org-eldoc :ensure t)
(use-package c-eldoc :ensure t
  :init (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode))


;;;; ido
;; (use-package ido
;;   :ensure t
;;   :init (setq ido-enable-flex-matching t
;;               ido-create-new-buffer 'always)
;;   :config (progn ;(use-package ido-ubiquitous
;;                   ; :ensure t)

;;                  (use-package ido-vertical-mode
;;                    :ensure t
;;                    :init (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
;;                    :config (ido-vertical-mode t))

;;                  (ido-mode t)))

;; Listed here because smex is built on ido
;; (use-package smex
;;   :ensure t
;;   :init (setq smex-auto-update 60)
;;   :config (smex-initialize)
;;   :bind (("M-x" . smex)
;;          ("M-X" . smex-major-mode-commands)
;;          ("M-s-x" . smex-show-unbound-commands)))


;;;; helm
(use-package helm :ensure t
  :config (progn (helm-mode 1)
                 (defalias 'occur 'helm-occur)
                 (defalias 'apropos-command 'helm-apropos))
  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-x f" . helm-find-files)
         ("C-x C-f" . helm-find-files)
         ("M-x " . helm-M-x)))
(use-package helm-ack :ensure t)
(use-package helm-descbinds :ensure t)
;(use-package helm-dictionary :ensure t)
(use-package helm-flycheck :ensure t)
(use-package helm-package :ensure t)
(use-package helm-pydoc :ensure t)
(use-package helm-proc :ensure t)
(use-package helm-themes :ensure t)
(use-package helm-gtags :ensure t
  :config (progn (add-hook 'c-mode-hook 'helm-gtags-mode)
                 (add-hook 'c++-mode-hook 'helm-gtags-mode)
                 (add-hook 'asm-mode-hook 'helm-gtags-mode)))


;;;; folding
(use-package yafolding :ensure t
  :init (defvar yafolding-mode-map
          (let ((map (make-sparse-keymap)))
            (define-key map (kbd "<C-S-return>") #'yafolding-hide-parent-element)
            (define-key map (kbd "<C-M-s-return>") #'yafolding-toggle-all)
            (define-key map (kbd "<s-return>") #'yafolding-toggle-element)
            map))
  :config (add-hook 'prog-mode-hook (lambda () (yafolding-mode))))

;;;; magit
(use-package magit :ensure t
  :init (setq magit-last-seen-setup-instructions "1.4.0")
  :config (progn
            ;; full screen magit-status
            (defadvice magit-status (around magit-fullscreen activate)
              (window-configuration-to-register :magit-fullscreen)
              ad-do-it
              (delete-other-windows))

            (defun magit-quit-session ()
              "Restores the previous window configuration and kills the magit buffer"
              (interactive)
              (kill-buffer)
              (jump-to-register :magit-fullscreen))

            (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
  :bind ("<f10>" . magit-status))


;;;; org-mode
(use-package org
  :init (setq org-log-done t
              org-agenda-files (list "~/org/home.org"
                                     "~/org/work.org"
                                     "~/org/school.org"))
  :bind (("C-c a" . org-agenda)
         ("C-c b" . org-iswitchb)
         ("C-c c" . org-capture)
         ("C-c l" . org-store-link)))

(use-package org-ac :ensure t)
(use-package org-bullets :ensure t
  :config (add-hook 'org-mode-hook 'org-bullets-mode))

;;;; python
(use-package python :ensure t
  :mode ("\\.py\\'" . python-mode)
  :config (add-hook 'python-mode-hook
                    (lambda ()
                      (setq tab-width 4)
                      (setq python-indent 4))))

(use-package elpy :ensure t
  :init (setq elpy-rpc-backend "jedi")
  :config (progn (elpy-enable)
                 (elpy-use-ipython)))

;;;; slime/quicklisp
(use-package slime :ensure t
  :init (progn
           ;; Set your lisp system and, optionally, some contribs
          (setq inferior-lisp-program "/usr/bin/sbcl")
          (setq slime-contribs '(slime-fancy))))
;; (use-package slime :ensure t
;;   :load-path "~/.slime/"
;;   :init (setq inferior-lisp-program "sbcl")
;;   :config (progn (load (expand-file-name "~/quicklisp/slime-helper.el"))))

(use-package lispy :ensure t)


;;;; w3m
(use-package w3m
  :init (setq w3m-mode-map (make-sparse-keymap))
                                        ;  :config (progn (require 'w3m-haddock)
                                        ;                 (add-hook 'w3m-display-hook 'w3m-haddock-display))
                                        ;  :bind (("C-c C-d" . haskell-w3m-open-haddock)
                                        ;         ("RET" . w3m-view-this-url)
                                        ;         ("q" . bury-buffer)
                                        ;         ("<mouse-1>" . w3m-maybe-url)
                                        ;         ("<f5>" . w3m-reload-this-page)
                                        ;         ("C-c C-d" . haskell-w3m-open-haddock)
                                        ;         ("M-<left>" . w3m-view-previous-page)
                                        ;         ("M-<right>" . w3m-view-next-page)
                                        ;         ("M-." . w3m-haddock-find-tag)))
  :ensure t)

(defun w3m-maybe-url ()
  (interactive)
  (if (or (equal '(w3m-anchor) (get-text-property (point) 'face))
          (equal '(w3m-arrived-anchor) (get-text-property (point) 'face)))
      (w3m-view-this-url)))


;;;; misc. functions
(defun swap-windows ()
  "If you have 2 windows, it swaps them."
  (interactive)
  (cond ((not (= (count-windows) 2))
         (message "You need exactly 2 windows to do this."))
        (t
         (let* ((w1 (first (window-list)))
                (w2 (second (window-list)))
                (b1 (window-buffer w1))
                (b2 (window-buffer w2))
                (s1 (window-start w1))
                (s2 (window-start w2)))
           (set-window-buffer w1 b2)
           (set-window-buffer w2 b1)
           (set-window-start w1 s2)
           (set-window-start w2 s1)))))

(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
	(filename (buffer-file-name)))
    (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
	(progn 	 (rename-file name new-name 1) 	 (rename-buffer new-name) 	 (set-visited-file-name new-name) 	 (set-buffer-modified-p nil))))))

(defun move-buffer-file (dir)
  "Moves both current buffer and file it's visiting to DIR."
  (interactive "DNew directory: ")
  (let* ((name (buffer-name))
	 (filename (buffer-file-name))
	 (dir
          (if (string-match dir "\\(?:/\\|\\\\)$")
              (substring dir 0 -1) dir))
	 (newname (concat dir "/" name)))

    (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
      (progn 	(copy-file filename newname 1) 	(delete-file filename) 	(set-visited-file-name newname) 	(set-buffer-modified-p nil) 	t))))

(defun new-empty-buffer ()
  "Open a new empty buffer."
  (interactive)
  (let ((buf (generate-new-buffer "untitled")))
    (switch-to-buffer buf)
    (funcall (and initial-major-mode))
    (setq buffer-offer-save t)))

(defun kill-this-buffer ()
  "Kills the current buffer without prompting for confirmation."
  (interactive)
  (kill-buffer (current-buffer)))

(defun revert-this-buffer ()
  "Reverts the current buffer from disk without prompting for confirmation."
  (interactive)
  (revert-buffer nil t t)
  (message (concat "Reverted buffer " (buffer-name))))

(defun duplicate-line ()
  "Duplicate the line containing point."
  (interactive)
  (save-excursion
    (let (line-text)
      (goto-char (line-beginning-position))
      (let ((beg (point)))
        (goto-char (line-end-position))
        (setq line-text (buffer-substring beg (point))))
      (if (eobp)
          (insert ?\n)
        (forward-line))
      (open-line 1)
      (insert line-text))))

(defun describe-thing-in-popup ()
  (interactive)
  (let* ((thing (symbol-at-point))
         (help-xref-following t)
         (description (with-temp-buffer
                        (help-mode)
                        (help-xref-interned thing)
                        (buffer-string))))
    (popup-tip description
               :point (point)
               :around t
               :height 30
               :scroll-bar t
               :margin t)))

(defun split-window-and-follow ()
  "Split screen in half horizontally, then enable follow-mode."
  (interactive)
  (split-window-horizontally)
  (follow-mode))

;;;; emacs lisp
(defun imenu-elisp-sections ()
  (setq imenu-prev-index-position-function nil)
  (add-to-list 'imenu-generic-expression '("Sections" "^;;;; \\(.+\\)$" 1) t))
(add-hook 'emacs-lisp-mode-hook 'imenu-elisp-sections)


;;;; keybindings
(use-package bind-key :ensure t
  :config (progn (bind-keys*
                  ("<f5>" . revert-this-buffer)
                  ("<f6>" . align)
                  ("<f7>" . delete-trailing-whitespace)
                  ("<f8>" . whitespace-mode)
                  ("<f9>" . linum-mode)
                  ("<f11>" . follow-mode)
                  ("M-<kp-add>" . split-window-and-follow)
                  ("<kp-divide>" . delete-window)
                  ("<kp-multiply>" . delete-other-windows)
                  ("<kp-subtract>" . split-window-vertically)
                  ("C-x C-d". duplicate-line)
                  ("C-x k" . kill-this-buffer) ;I use this way more often
                  ("C-w" . backward-kill-word)
                  ("C-x C-k" . kill-region)
                  ("C-c C-k" . kill-region)
                  ("C-x M-k" . kill-buffer)
                  ("C-c C-b" . new-empty-buffer)
                  ("M-#" . query-replace-regexp)
                  ("M-<f4>" . apply-macro-to-region-lines)
                  ("M-SPC" . just-one-space)
                  ("M-o" . other-window))))

(define-key lisp-mode-map (kbd "M-.") 'find-function-at-point)
(define-key lisp-mode-map (kbd "C-;") 'describe-thing-in-popup)

;; Use the forward/back buttons on the mouse
(global-set-key [mouse-8] 'previous-buffer)
(global-set-key [mouse-9] 'next-buffer)

(global-set-key (kbd "C-z") 'repeat)    ;Repeat last command

(defalias 'list-buffers 'ibuffer)


;; Indent line and create new, indented line after current one
(global-set-key (kbd "C-<return>") (lambda () (interactive)
                                     (end-of-line)
                                     (reindent-then-newline-and-indent)))

;; Shortcut to save file and close client window
(global-set-key (kbd "s-s") (lambda () (interactive)
                              (save-buffer)
                              (server-edit)))

(setq auto-save-default nil    ; No #auto-save# files
      echo-keystrokes 0.1
      inhibit-startup-screen t ; No startup screen
      make-backup-files nil    ; No backup~ files
      tooltip-delay 0.1        ; (Defaults to 0.7)
      use-dialog-box nil
      user-full-name "Charles Pittman")

;; Note that this line uses setq-default; it sets values only in buffers that
;; do not have their own local values.
(setq-default indent-tabs-mode nil
              tab-always-indent 'complete)

(delete-selection-mode t)
(desktop-save-mode 1)
(electric-indent-mode t)
(electric-pair-mode t)
(global-font-lock-mode t) ; syntax highlighting
(global-visual-line-mode t)
(show-paren-mode t)
(transient-mark-mode t)

;; Removing trailing whitespace every time a file is saved.
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Start mail-mode for any file with 'mutt' in the name.
(add-to-list 'auto-mode-alist '("/mutt" . mail-mode))

(add-to-list 'auto-mode-alist '("\\zsh\\'" . shell-script-mode))


;;;; pos-tip
(use-package pos-tip :ensure t)


;;;; ruby
(use-package enh-ruby-mode :ensure t
  :mode ("\\.rb$" . enh-ruby-mode))
(use-package yari :ensure t)
(use-package ruby-tools :ensure t)
(use-package rubocop :ensure t)
(use-package robe :ensure t
  :config (add-hook 'enh-ruby-mode-hook 'robe-mode))
(use-package inf-ruby :ensure t
  :config (progn (add-hook 'enh-ruby-mode 'inf-ruby)
                 (push 'company-robe company-backends)))

;;;; writegood
(use-package writegood-mode :ensure t :defer t)


;;;; gnuplot
(use-package gnuplot :ensure t :defer t
  :mode (("\\.plt$" . gnuplot-mode)))


;;;; octave
;; (use-package octave-mod
;;   :mode (("\\.m$" . octave-mode))
;;   :config (add-hook 'octave-mode-hook
;;                     (lambda ()
;;                       (abbrev-mode 1)
;;                       (auto-fill-mode 1))))


;;;; ibuffer
(use-package ibuffer :ensure t :defer t)
(use-package ibuffer-tramp :ensure t :defer t)
(use-package ibuffer-vc :ensure t :defer t)

;;;; pianobar
(use-package pianobar :ensure t
  :init (setq pianobar-username "chucks86@gmail.com")
  :bind (("s-m m" . pianobar)
         ("s-m n" . pianobar-next-song)
         ("s-m c" . pianobar-change-station)
         ("s-m l" . pianobar-love-current-song)
         ("s-m h" . pianobar-ban-current-song)
         ("s-m p" . pianobar-play-or-pause)))


;;;; yasnippet
(use-package yasnippet :ensure t
  :init (yas-global-mode t))


;;;; mail
(use-package nm :ensure t)
(use-package notmuch :ensure t)
;(use-package notmuch-unread :ensure t)
(use-package bbdb :ensure t)


;;;; mode-line
(use-package rich-minority :ensure t
  :init (setq rm-blacklist '(" AC" " MRev" " Helm" "hl-p" " vl" " Wrap")))
(use-package nyan-mode :ensure t)


;;;; csv
(use-package csv-mode :ensure t)


;(load "conf-mu4e")

;(load "/usr/share/emacs/site-lisp/emacspeak/lisp/emacspeak-setup.el")
